/**
 * @generated VGen (for ANTLR) 1.7.2
 */


// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendría un visitor que compila y
que al ejecutarlo recorrería todo el árbol (sin hacer nada aún en él).
Solo quedaría añadir a cada método visit aquello adicional que se quiera realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede
	// borrar (dicho método se heredaría de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera, cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST
    //      (dejando que el padre se encargue del recorrido de los hijos).
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso, ya se tiene implementado
	//		dicho recorrido y solo habría que incrustar las acciones adicionales en el mismo. En este caso,
	//		es la llamada a 'super.visit' la que debería ser borrada.
	// ---------------------------------------------------------

	//	class Program { List<Definition> definitions; }
	public Object visit(Program node, Object param) {

		// super.visit(node, param);

		if (node.getDefinitions() != null)
			for (Definition child : node.getDefinitions())
				child.accept(this, param);

		return null;
	}

	//	class VarDefinition { Type type;  String name; }
	public Object visit(VarDefinition node, Object param) {

		// super.visit(node, param);

		if (node.getType() != null)
			node.getType().accept(this, param);

		return null;
	}

	//	class FunctionDef { String ident;  Type tipo;  List<Definition> localDefs;  List<Sentence> stats; }
	public Object visit(FunctionDef node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getLocalDefs() != null)
			for (Definition child : node.getLocalDefs())
				child.accept(this, param);

		if (node.getStats() != null)
			for (Sentence child : node.getStats())
				child.accept(this, param);

		return null;
	}

	//	class StructDef { String name;  Type tipo;  List<Definition> records; }
	public Object visit(StructDef node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getRecords() != null)
			for (Definition child : node.getRecords())
				child.accept(this, param);

		return null;
	}

	//	class RecordDef { String name;  Type tipo; }
	public Object visit(RecordDef node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class ArrayType { int length;  Type typeOf; }
	public Object visit(ArrayType node, Object param) {

		// super.visit(node, param);

		if (node.getTypeOf() != null)
			node.getTypeOf().accept(this, param);

		return null;
	}

	//	class StructType {  }
	public Object visit(StructType node, Object param) {
		return null;
	}

	//	class FunctionType { Type retType;  List<Definition> paramDefs; }
	public Object visit(FunctionType node, Object param) {

		// super.visit(node, param);

		if (node.getRetType() != null)
			node.getRetType().accept(this, param);

		if (node.getParamDefs() != null)
			for (Definition child : node.getParamDefs())
				child.accept(this, param);

		return null;
	}

	//	class CharType {  }
	public Object visit(CharType node, Object param) {
		return null;
	}

	//	class IntType {  }
	public Object visit(IntType node, Object param) {
		return null;
	}

	//	class RealType {  }
	public Object visit(RealType node, Object param) {
		return null;
	}

	//	class Print { Expression expression; }
	public Object visit(Print node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class Read { Expression expression; }
	public Object visit(Read node, Object param) {

		// super.visit(node, param);

		if (node.getExpression() != null)
			node.getExpression().accept(this, param);

		return null;
	}

	//	class Assignment { Expression left;  Expression right; }
	public Object visit(Assignment node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class IfElse { Expression condition;  List<Sentence> ifSentences;  List<Sentence> elseSentences; }
	public Object visit(IfElse node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getIfSentences() != null)
			for (Sentence child : node.getIfSentences())
				child.accept(this, param);

		if (node.getElseSentences() != null)
			for (Sentence child : node.getElseSentences())
				child.accept(this, param);

		return null;
	}

	//	class While { Expression condition;  List<Sentence> whileSentences; }
	public Object visit(While node, Object param) {

		// super.visit(node, param);

		if (node.getCondition() != null)
			node.getCondition().accept(this, param);

		if (node.getWhileSentences() != null)
			for (Sentence child : node.getWhileSentences())
				child.accept(this, param);

		return null;
	}

	//	class Return { Expression expr; }
	public Object visit(Return node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class CallProcedure { String ident;  List<Expression> args; }
	public Object visit(CallProcedure node, Object param) {

		// super.visit(node, param);

		if (node.getArgs() != null)
			for (Expression child : node.getArgs())
				child.accept(this, param);

		return null;
	}

	//	class Arithmetic { Expression left;  String op;  Expression right; }
	public Object visit(Arithmetic node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Logic { Expression left;  String op;  Expression right; }
	public Object visit(Logic node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Comparison { Expression left;  String op;  Expression right; }
	public Object visit(Comparison node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class Variable { String name; }
	public Object visit(Variable node, Object param) {
		return null;
	}

	//	class Indexing { Expression ident;  Expression index; }
	public Object visit(Indexing node, Object param) {

		// super.visit(node, param);

		if (node.getIdent() != null)
			node.getIdent().accept(this, param);

		if (node.getIndex() != null)
			node.getIndex().accept(this, param);

		return null;
	}

	//	class Not { Expression expr; }
	public Object visit(Not node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class UnaryMinus { Expression expr; }
	public Object visit(UnaryMinus node, Object param) {

		// super.visit(node, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class Cast { Type castType;  Expression expr; }
	public Object visit(Cast node, Object param) {

		// super.visit(node, param);

		if (node.getCastType() != null)
			node.getCastType().accept(this, param);

		if (node.getExpr() != null)
			node.getExpr().accept(this, param);

		return null;
	}

	//	class FieldAccess { Expression ident;  String fieldName; }
	public Object visit(FieldAccess node, Object param) {

		// super.visit(node, param);

		if (node.getIdent() != null)
			node.getIdent().accept(this, param);

		return null;
	}

	//	class CallFunction { String ident;  List<Expression> arguments; }
	public Object visit(CallFunction node, Object param) {

		// super.visit(node, param);

		if (node.getArguments() != null)
			for (Expression child : node.getArguments())
				child.accept(this, param);

		return null;
	}

	//	class CharConstant { char value; }
	public Object visit(CharConstant node, Object param) {
		return null;
	}

	//	class IntConstant { int value; }
	public Object visit(IntConstant node, Object param) {
		return null;
	}

	//	class RealConstant { float value; }
	public Object visit(RealConstant node, Object param) {
		return null;
	}
}
